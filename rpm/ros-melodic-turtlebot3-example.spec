Name:           ros-melodic-turtlebot3-example
Version:        1.2.2
Release:        1%{?dist}
Summary:        ROS turtlebot3_example package

Group:          Development/Libraries
License:        Apache 2.0
URL:            http://wiki.ros.org/turtlebot3_example
Source0:        %{name}-%{version}.tar.gz

Requires:       ros-melodic-actionlib
Requires:       ros-melodic-actionlib-msgs
Requires:       ros-melodic-geometry-msgs
Requires:       ros-melodic-interactive-markers
Requires:       ros-melodic-message-runtime
Requires:       ros-melodic-nav-msgs
Requires:       ros-melodic-rospy
Requires:       ros-melodic-sensor-msgs
Requires:       ros-melodic-std-msgs
Requires:       ros-melodic-turtlebot3-bringup
Requires:       ros-melodic-turtlebot3-msgs
Requires:       ros-melodic-visualization-msgs
BuildRequires:  ros-melodic-actionlib
BuildRequires:  ros-melodic-actionlib-msgs
BuildRequires:  ros-melodic-catkin
BuildRequires:  ros-melodic-geometry-msgs
BuildRequires:  ros-melodic-interactive-markers
BuildRequires:  ros-melodic-message-generation
BuildRequires:  ros-melodic-nav-msgs
BuildRequires:  ros-melodic-rospy
BuildRequires:  ros-melodic-sensor-msgs
BuildRequires:  ros-melodic-std-msgs
BuildRequires:  ros-melodic-turtlebot3-msgs
BuildRequires:  ros-melodic-visualization-msgs

%description
This package provides four TurtleBot3 basic example include move using
interactive marker, move and stop using LDS, move to goal position, move to
custom routes. The interactions node is that you can control the TurtleBot3
front and back side or rotate to goal position. The obstacle node is that when
the robot meets an obstacle, it stops. The patrol node is that TurtleBot3 move
to custom route. There are 3 route(square, triangle, circle) in this package.
You can add your route and move the TurtleBot3. The pointop node is that you can
insert goal position include distance x-axis, y-axis and angluar z-axis.

%prep
%setup -q

%build
# In case we're installing to a non-standard location, look for a setup.sh
# in the install tree that was dropped by catkin, and source it.  It will
# set things like CMAKE_PREFIX_PATH, PKG_CONFIG_PATH, and PYTHONPATH.
if [ -f "/opt/ros/melodic/setup.sh" ]; then . "/opt/ros/melodic/setup.sh"; fi
mkdir -p obj-%{_target_platform} && cd obj-%{_target_platform}
%cmake .. \
        -UINCLUDE_INSTALL_DIR \
        -ULIB_INSTALL_DIR \
        -USYSCONF_INSTALL_DIR \
        -USHARE_INSTALL_PREFIX \
        -ULIB_SUFFIX \
        -DCMAKE_INSTALL_LIBDIR="lib" \
        -DCMAKE_INSTALL_PREFIX="/opt/ros/melodic" \
        -DCMAKE_PREFIX_PATH="/opt/ros/melodic" \
        -DSETUPTOOLS_DEB_LAYOUT=OFF \
        -DCATKIN_BUILD_BINARY_PACKAGE="1" \

make %{?_smp_mflags}

%install
# In case we're installing to a non-standard location, look for a setup.sh
# in the install tree that was dropped by catkin, and source it.  It will
# set things like CMAKE_PREFIX_PATH, PKG_CONFIG_PATH, and PYTHONPATH.
if [ -f "/opt/ros/melodic/setup.sh" ]; then . "/opt/ros/melodic/setup.sh"; fi
cd obj-%{_target_platform}
make %{?_smp_mflags} install DESTDIR=%{buildroot}

%files
/opt/ros/melodic

%changelog
* Tue Aug 20 2019 Pyo <pyo@robotis.com> - 1.2.2-1
- Autogenerated by Bloom

* Tue Jan 22 2019 Pyo <pyo@robotis.com> - 1.2.0-0
- Autogenerated by Bloom

